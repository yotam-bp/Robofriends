{"version":3,"sources":["components/Card.js","components/Cardlist.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","Cardlist","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","scroll","props","style","overflowY","border","hight","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Scroll","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"8MAaeA,EAXF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GACxB,OACI,yBAAKC,UAAY,+CACd,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,mBACrB,6BACI,4BAAKF,GACL,+BAAKC,MCaLK,EAlBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAEf,OACE,6BAEAA,EAAOC,KAAI,SAACC,EAAMC,GAChB,OAAQ,kBAAC,EAAD,CACPC,IAAOD,EACPR,GAAIK,EAAOG,GAAGR,GACdF,KAAQO,EAAOG,GAAGV,KAClBC,MAASM,EAAOG,GAAGT,aCEbW,EAbG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAC9B,OACI,yBAAKX,UAAY,OACf,2BACCA,UAAY,mCACZY,KAAO,SACPC,YAAc,gBACdC,SAAYH,MCCRI,EARA,SAACC,GACZ,OACI,yBAAKC,MAAS,CAACC,UAAW,SAAWC,OAAS,kBAAoBC,MAAQ,UACzEJ,EAAMK,WCkBAC,E,kDApBX,WAAYN,GAAQ,IAAD,8BACf,cAAMA,IACDO,MAAQ,CACTC,UAAU,GAHC,E,8DAODC,EAAMC,GACpBC,KAAKC,SAAU,CAAEJ,UAAW,M,+BAKhC,OAAIG,KAAKJ,MAAMC,SACL,6DAEFG,KAAKX,MAAMK,a,GAjBIQ,aC+CZC,E,kDA1CX,aAAgB,IAAD,8BACX,gBAaPC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAAClB,YAAasB,EAAMC,OAAOC,SAbtC,EAAKX,MAAQ,CACTnB,OAAQ,GACRM,YAAa,IAJN,E,gEAQE,IAAD,OAChByB,MAAM,8CACPC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKX,SAAS,CAACxB,OAAOmC,S,+BAO1B,IAAD,EACsBZ,KAAKJ,MAA7BnB,EADE,EACFA,OAASM,EADP,EACOA,YACT8B,EAAiBpC,EAAOqC,QAAO,SAAAC,GACjC,OAAOA,EAAM7C,KAAK8C,cAAcC,SAASlC,EAAYiC,kBAGrD,OAAQvC,EAAOyC,OAGf,yBAAK7C,UAAY,MAChB,wBAAIA,UAAY,MAAhB,kBACA,kBAAC,EAAD,CAAWW,aAAgBgB,KAAKI,iBAChC,kBAACe,EAAD,KACA,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAU1C,OAAUoC,OAPrB,2C,GA1BUX,aCMEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCNNC,IAASC,OAAQ,kBAAC,EAAD,MAAOC,SAASC,eAAe,SDuH1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLqC,QAAQrC,MAAMA,EAAMsC,a","file":"static/js/main.66c35766.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id}) => {\r\n    return (\r\n        <div className = 'bg-light-blue dib br3 pa3 ma2 grow shadow-5'>\r\n           <img alt='robots' src={`https://robohash.org/${id}?size=200x200`}/>\r\n           <div>\r\n               <h2>{name}</h2>\r\n               <p> {email}</p>\r\n           </div>    \r\n        </div>\r\n    );\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst Cardlist = ({robots}) => {\r\n    \r\n    return (\r\n      <div>\r\n      {\r\n      robots.map((user, i) => {\r\n        return( <Card\r\n         key = {i} \r\n         id={robots[i].id} \r\n         name = {robots[i].name}\r\n         email = {robots[i].email}/>\r\n           );\r\n          })\r\n         } \r\n      </div>\r\n\r\n    );\r\n}\r\nexport default Cardlist;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n    return (\r\n        <div className = 'pa2'>\r\n          <input\r\n           className = 'pa3 ba b--green bg-lightest-blue'\r\n           type = 'search'\r\n           placeholder = 'search robots'\r\n           onChange = {searchChange}\r\n         />   \r\n        </div>\r\n        \r\n    );\r\n}\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst scroll = (props) => {\r\n    return(\r\n        <div style = {{overflowY: 'scroll' , border : '1px solid black' , hight : '800px' }} >\r\n        {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default scroll;","import React,{Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError :false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error,info) {\r\n        this.setState ({ hasError : true })\r\n\r\n    }\r\n\r\n   render() {\r\n    if (this.state.hasError){\r\n     return   <h1>ooops... somthing went wrong </h1>\r\n    }\r\n     return this.props.children\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport Cardlist from '../components/Cardlist';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\n\r\nclass App extends Component {\r\n    constructor () {\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n componentDidMount(){\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n  .then(response => response.json())\r\n  .then(users => this.setState({robots:users}));\r\n }\r\n\r\n onSearchChange = (event) =>{\r\n     this.setState({searchfield: event.target.value})\r\n     }\r\n\r\n render ()  {\r\n   const {robots , searchfield} = this.state;\r\n    const filteredRobots = robots.filter(robot => {\r\n        return robot.name.toLowerCase().includes(searchfield.toLowerCase())\r\n       })\r\n      \r\n        return !robots.length ? \r\n        <h1>Loading</h1> :\r\n       (\r\n        <div className = 'tc'>\r\n         <h1 className = 'f1'> Robot Friends</h1>\r\n         <SearchBox searchChange = {this.onSearchChange}/>\r\n         <Scroll>\r\n         <ErrorBoundry>\r\n         <Cardlist robots = {filteredRobots}/>\r\n         </ErrorBoundry>\r\n         </Scroll>\r\n        </div>\r\n      \r\n      );\r\n    \r\n    }\r\n  }\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\nimport './containers/App.css';\r\nimport './index.css';\r\n\r\n\r\n\r\n\r\nReactDOM.render( <App/>,document.getElementById('root'));\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}